import { QueryExecutorInterface } from "../Query/QueryExecutorInterface";
import { DataSourceInterface } from "../DataService/DataSourceInterface";
import DataService from "../DataService/DataService";
import Query from "../Query/Query";
import ApiService from "../Api/ApiService";
import { SerializerInterface } from "../Api/SerializerInterface";
import Logger from "ts-core/lib/Logger/Logger";
import { DataSourceResponseInterface } from "../DataService/DataSourceResponseInterface";
export default class ApiDataSource implements DataSourceInterface, QueryExecutorInterface {
    protected $q: ng.IQService;
    protected apiService: ApiService;
    protected serializer: SerializerInterface;
    protected logger: Logger;
    static IDENTIFIER: string;
    protected _dataService: DataService;
    constructor($q: ng.IQService, apiService: ApiService, serializer: SerializerInterface, logger?: Logger);
    getIdentifier(): string;
    setDataService(service: DataService): void;
    getDataService(): DataService;
    execute(query: Query<any>): ng.IPromise<DataSourceResponseInterface>;
    create(resourceName: string, data: any): ng.IPromise<DataSourceResponseInterface>;
    update(resourceName: string, resourceId: any, data: any): ng.IPromise<DataSourceResponseInterface>;
    remove(resourceName: string, resourceId: any): ng.IPromise<DataSourceResponseInterface>;
    notifyExecute(query: Query<any>, response: DataSourceResponseInterface): ng.IPromise<void>;
    notifyCreate(response: DataSourceResponseInterface): ng.IPromise<void>;
    notifyUpdate(response: DataSourceResponseInterface): ng.IPromise<void>;
    notifyRemove(response: DataSourceResponseInterface): ng.IPromise<void>;
    invalidate(resourceName?: string, resourceId?: any): ng.IPromise<void>;
    protected _transformRequest(resourceName: string, data: any): any;
    protected _transformResponse(resourceName: string, response: any): DataSourceResponseInterface;
}
